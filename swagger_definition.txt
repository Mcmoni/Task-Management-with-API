openapi: 3.0.0
info:
  title: Task Manager API
  description: A RESTful API for managing tasks built with TypeScript and Express
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: Tasks
    description: Task management endpoints

paths:
  /tasks:
    get:
      summary: Get all tasks
      tags: [Tasks]
      responses:
        200:
          description: List of all tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
    
    post:
      summary: Create a new task
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskDto'
      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      task:
                        $ref: '#/components/schemas/Task'
        400:
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tasks/{id}:
    parameters:
      - name: id
        in: path
        description: Task ID
        required: true
        schema:
          type: string
    
    get:
      summary: Get a task by ID
      tags: [Tasks]
      responses:
        200:
          description: Task found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      task:
                        $ref: '#/components/schemas/Task'
        404:
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a task
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskDto'
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      task:
                        $ref: '#/components/schemas/Task'
        400:
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete a task
      tags: [Tasks]
      responses:
        204:
          description: Task deleted successfully
        404:
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Complete project documentation"
        description:
          type: string
          example: "Write comprehensive documentation for the project"
        priority:
          type: string
          enum: [low, medium, high]
          example: "high"
        status:
          type: string
          enum: [todo, in_progress, completed]
          example: "in_progress"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - description
        - priority
        - status
        - createdAt
        - updatedAt
    
    CreateTaskDto:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
          example: "Complete project documentation"
        description:
          type: string
          minLength: 5
          maxLength: 500
          example: "Write comprehensive documentation for the project"
        priority:
          type: string
          enum: [low, medium, high]
          example: "high"
        status:
          type: string
          enum: [todo, in_progress, completed]
          example: "todo"
      required:
        - title
        - description
    
    UpdateTaskDto:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
          example: "Updated task title"
        description:
          type: string
          minLength: 5
          maxLength: 500
          example: "Updated task description"
        priority:
          type: string
          enum: [low, medium, high]
          example: "medium"
        status:
          type: string
          enum: [todo, in_progress, completed]
          example: "in_progress"
      minProperties: 1
    
    Error:
      type: object
      properties:
        status:
          type: string
          example: "error"
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: "Validation error: title length must be at least 3 characters long"